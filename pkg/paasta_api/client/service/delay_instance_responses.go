// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/Yelp/paasta-tools-go/pkg/paasta_api/models"
)

// DelayInstanceReader is a Reader for the DelayInstance structure.
type DelayInstanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DelayInstanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDelayInstanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDelayInstanceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDelayInstanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDelayInstanceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDelayInstanceOK creates a DelayInstanceOK with default headers values
func NewDelayInstanceOK() *DelayInstanceOK {
	return &DelayInstanceOK{}
}

/*DelayInstanceOK handles this case with default header values.

The service is delayed for these possible reasons
*/
type DelayInstanceOK struct {
	Payload models.InstanceDelay
}

func (o *DelayInstanceOK) Error() string {
	return fmt.Sprintf("[GET /services/{service}/{instance}/delay][%d] delayInstanceOK  %+v", 200, o.Payload)
}

func (o *DelayInstanceOK) GetPayload() models.InstanceDelay {
	return o.Payload
}

func (o *DelayInstanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDelayInstanceNoContent creates a DelayInstanceNoContent with default headers values
func NewDelayInstanceNoContent() *DelayInstanceNoContent {
	return &DelayInstanceNoContent{}
}

/*DelayInstanceNoContent handles this case with default header values.

Could not find any reasons for a delay
*/
type DelayInstanceNoContent struct {
}

func (o *DelayInstanceNoContent) Error() string {
	return fmt.Sprintf("[GET /services/{service}/{instance}/delay][%d] delayInstanceNoContent ", 204)
}

func (o *DelayInstanceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDelayInstanceNotFound creates a DelayInstanceNotFound with default headers values
func NewDelayInstanceNotFound() *DelayInstanceNotFound {
	return &DelayInstanceNotFound{}
}

/*DelayInstanceNotFound handles this case with default header values.

Deployment key not found
*/
type DelayInstanceNotFound struct {
}

func (o *DelayInstanceNotFound) Error() string {
	return fmt.Sprintf("[GET /services/{service}/{instance}/delay][%d] delayInstanceNotFound ", 404)
}

func (o *DelayInstanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDelayInstanceInternalServerError creates a DelayInstanceInternalServerError with default headers values
func NewDelayInstanceInternalServerError() *DelayInstanceInternalServerError {
	return &DelayInstanceInternalServerError{}
}

/*DelayInstanceInternalServerError handles this case with default header values.

Instance failure
*/
type DelayInstanceInternalServerError struct {
}

func (o *DelayInstanceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /services/{service}/{instance}/delay][%d] delayInstanceInternalServerError ", 500)
}

func (o *DelayInstanceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
