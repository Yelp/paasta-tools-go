// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStatusInstanceParams creates a new StatusInstanceParams object
// with the default values initialized.
func NewStatusInstanceParams() *StatusInstanceParams {
	var ()
	return &StatusInstanceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStatusInstanceParamsWithTimeout creates a new StatusInstanceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStatusInstanceParamsWithTimeout(timeout time.Duration) *StatusInstanceParams {
	var ()
	return &StatusInstanceParams{

		timeout: timeout,
	}
}

// NewStatusInstanceParamsWithContext creates a new StatusInstanceParams object
// with the default values initialized, and the ability to set a context for a request
func NewStatusInstanceParamsWithContext(ctx context.Context) *StatusInstanceParams {
	var ()
	return &StatusInstanceParams{

		Context: ctx,
	}
}

// NewStatusInstanceParamsWithHTTPClient creates a new StatusInstanceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStatusInstanceParamsWithHTTPClient(client *http.Client) *StatusInstanceParams {
	var ()
	return &StatusInstanceParams{
		HTTPClient: client,
	}
}

/*StatusInstanceParams contains all the parameters to send to the API endpoint
for the status instance operation typically these are written to a http.Request
*/
type StatusInstanceParams struct {

	/*IncludeMesos
	  Include Mesos information

	*/
	IncludeMesos *bool
	/*IncludeSmartstack
	  Include Smartstack information

	*/
	IncludeSmartstack *bool
	/*Instance
	  Instance name

	*/
	Instance string
	/*Service
	  Service name

	*/
	Service string
	/*Verbose
	  Include verbose status information

	*/
	Verbose *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the status instance params
func (o *StatusInstanceParams) WithTimeout(timeout time.Duration) *StatusInstanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the status instance params
func (o *StatusInstanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the status instance params
func (o *StatusInstanceParams) WithContext(ctx context.Context) *StatusInstanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the status instance params
func (o *StatusInstanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the status instance params
func (o *StatusInstanceParams) WithHTTPClient(client *http.Client) *StatusInstanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the status instance params
func (o *StatusInstanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeMesos adds the includeMesos to the status instance params
func (o *StatusInstanceParams) WithIncludeMesos(includeMesos *bool) *StatusInstanceParams {
	o.SetIncludeMesos(includeMesos)
	return o
}

// SetIncludeMesos adds the includeMesos to the status instance params
func (o *StatusInstanceParams) SetIncludeMesos(includeMesos *bool) {
	o.IncludeMesos = includeMesos
}

// WithIncludeSmartstack adds the includeSmartstack to the status instance params
func (o *StatusInstanceParams) WithIncludeSmartstack(includeSmartstack *bool) *StatusInstanceParams {
	o.SetIncludeSmartstack(includeSmartstack)
	return o
}

// SetIncludeSmartstack adds the includeSmartstack to the status instance params
func (o *StatusInstanceParams) SetIncludeSmartstack(includeSmartstack *bool) {
	o.IncludeSmartstack = includeSmartstack
}

// WithInstance adds the instance to the status instance params
func (o *StatusInstanceParams) WithInstance(instance string) *StatusInstanceParams {
	o.SetInstance(instance)
	return o
}

// SetInstance adds the instance to the status instance params
func (o *StatusInstanceParams) SetInstance(instance string) {
	o.Instance = instance
}

// WithService adds the service to the status instance params
func (o *StatusInstanceParams) WithService(service string) *StatusInstanceParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the status instance params
func (o *StatusInstanceParams) SetService(service string) {
	o.Service = service
}

// WithVerbose adds the verbose to the status instance params
func (o *StatusInstanceParams) WithVerbose(verbose *int32) *StatusInstanceParams {
	o.SetVerbose(verbose)
	return o
}

// SetVerbose adds the verbose to the status instance params
func (o *StatusInstanceParams) SetVerbose(verbose *int32) {
	o.Verbose = verbose
}

// WriteToRequest writes these params to a swagger request
func (o *StatusInstanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeMesos != nil {

		// query param include_mesos
		var qrIncludeMesos bool
		if o.IncludeMesos != nil {
			qrIncludeMesos = *o.IncludeMesos
		}
		qIncludeMesos := swag.FormatBool(qrIncludeMesos)
		if qIncludeMesos != "" {
			if err := r.SetQueryParam("include_mesos", qIncludeMesos); err != nil {
				return err
			}
		}

	}

	if o.IncludeSmartstack != nil {

		// query param include_smartstack
		var qrIncludeSmartstack bool
		if o.IncludeSmartstack != nil {
			qrIncludeSmartstack = *o.IncludeSmartstack
		}
		qIncludeSmartstack := swag.FormatBool(qrIncludeSmartstack)
		if qIncludeSmartstack != "" {
			if err := r.SetQueryParam("include_smartstack", qIncludeSmartstack); err != nil {
				return err
			}
		}

	}

	// path param instance
	if err := r.SetPathParam("instance", o.Instance); err != nil {
		return err
	}

	// path param service
	if err := r.SetPathParam("service", o.Service); err != nil {
		return err
	}

	if o.Verbose != nil {

		// query param verbose
		var qrVerbose int32
		if o.Verbose != nil {
			qrVerbose = *o.Verbose
		}
		qVerbose := swag.FormatInt32(qrVerbose)
		if qVerbose != "" {
			if err := r.SetQueryParam("verbose", qVerbose); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
