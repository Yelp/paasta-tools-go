// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDelayInstanceParams creates a new DelayInstanceParams object
// with the default values initialized.
func NewDelayInstanceParams() *DelayInstanceParams {
	var ()
	return &DelayInstanceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDelayInstanceParamsWithTimeout creates a new DelayInstanceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDelayInstanceParamsWithTimeout(timeout time.Duration) *DelayInstanceParams {
	var ()
	return &DelayInstanceParams{

		timeout: timeout,
	}
}

// NewDelayInstanceParamsWithContext creates a new DelayInstanceParams object
// with the default values initialized, and the ability to set a context for a request
func NewDelayInstanceParamsWithContext(ctx context.Context) *DelayInstanceParams {
	var ()
	return &DelayInstanceParams{

		Context: ctx,
	}
}

// NewDelayInstanceParamsWithHTTPClient creates a new DelayInstanceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDelayInstanceParamsWithHTTPClient(client *http.Client) *DelayInstanceParams {
	var ()
	return &DelayInstanceParams{
		HTTPClient: client,
	}
}

/*DelayInstanceParams contains all the parameters to send to the API endpoint
for the delay instance operation typically these are written to a http.Request
*/
type DelayInstanceParams struct {

	/*Instance
	  Instance name

	*/
	Instance string
	/*Service
	  Service name

	*/
	Service string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delay instance params
func (o *DelayInstanceParams) WithTimeout(timeout time.Duration) *DelayInstanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delay instance params
func (o *DelayInstanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delay instance params
func (o *DelayInstanceParams) WithContext(ctx context.Context) *DelayInstanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delay instance params
func (o *DelayInstanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delay instance params
func (o *DelayInstanceParams) WithHTTPClient(client *http.Client) *DelayInstanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delay instance params
func (o *DelayInstanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInstance adds the instance to the delay instance params
func (o *DelayInstanceParams) WithInstance(instance string) *DelayInstanceParams {
	o.SetInstance(instance)
	return o
}

// SetInstance adds the instance to the delay instance params
func (o *DelayInstanceParams) SetInstance(instance string) {
	o.Instance = instance
}

// WithService adds the service to the delay instance params
func (o *DelayInstanceParams) WithService(service string) *DelayInstanceParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the delay instance params
func (o *DelayInstanceParams) SetService(service string) {
	o.Service = service
}

// WriteToRequest writes these params to a swagger request
func (o *DelayInstanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param instance
	if err := r.SetPathParam("instance", o.Instance); err != nil {
		return err
	}

	// path param service
	if err := r.SetPathParam("service", o.Service); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
