// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DelayInstance gets the possible reasons for a deployment delay for a marathon service instance
*/
func (a *Client) DelayInstance(params *DelayInstanceParams) (*DelayInstanceOK, *DelayInstanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelayInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delay_instance",
		Method:             "GET",
		PathPattern:        "/services/{service}/{instance}/delay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelayInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DelayInstanceOK:
		return value, nil, nil
	case *DelayInstanceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstanceSetState changes state of service name instance name
*/
func (a *Client) InstanceSetState(params *InstanceSetStateParams) (*InstanceSetStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstanceSetStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instance_set_state",
		Method:             "POST",
		PathPattern:        "/services/{service}/{instance}/state/{desired_state}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstanceSetStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstanceSetStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instance_set_state: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListInstances lists instances of service name
*/
func (a *Client) ListInstances(params *ListInstancesParams) (*ListInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_instances",
		Method:             "GET",
		PathPattern:        "/services/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServicesForCluster lists service names and service instance names on the current cluster
*/
func (a *Client) ListServicesForCluster(params *ListServicesForClusterParams) (*ListServicesForClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesForClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_services_for_cluster",
		Method:             "GET",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServicesForClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicesForClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_services_for_cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StatusInstance gets status of service name instance name
*/
func (a *Client) StatusInstance(params *StatusInstanceParams) (*StatusInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "status_instance",
		Method:             "GET",
		PathPattern:        "/services/{service}/{instance}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for status_instance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TaskInstance gets mesos task of service name instance name by task id
*/
func (a *Client) TaskInstance(params *TaskInstanceParams) (*TaskInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "task_instance",
		Method:             "GET",
		PathPattern:        "/services/{service}/{instance}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaskInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaskInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for task_instance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TasksInstance gets mesos tasks of service name instance name
*/
func (a *Client) TasksInstance(params *TasksInstanceParams) (*TasksInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTasksInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tasks_instance",
		Method:             "GET",
		PathPattern:        "/services/{service}/{instance}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TasksInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TasksInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tasks_instance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
