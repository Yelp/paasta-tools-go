// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMetastatusParams creates a new MetastatusParams object
// with the default values initialized.
func NewMetastatusParams() *MetastatusParams {
	var ()
	return &MetastatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMetastatusParamsWithTimeout creates a new MetastatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMetastatusParamsWithTimeout(timeout time.Duration) *MetastatusParams {
	var ()
	return &MetastatusParams{

		timeout: timeout,
	}
}

// NewMetastatusParamsWithContext creates a new MetastatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewMetastatusParamsWithContext(ctx context.Context) *MetastatusParams {
	var ()
	return &MetastatusParams{

		Context: ctx,
	}
}

// NewMetastatusParamsWithHTTPClient creates a new MetastatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMetastatusParamsWithHTTPClient(client *http.Client) *MetastatusParams {
	var ()
	return &MetastatusParams{
		HTTPClient: client,
	}
}

/*MetastatusParams contains all the parameters to send to the API endpoint
for the metastatus operation typically these are written to a http.Request
*/
type MetastatusParams struct {

	/*CmdArgs
	  comma separated list of command arguments

	*/
	CmdArgs []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the metastatus params
func (o *MetastatusParams) WithTimeout(timeout time.Duration) *MetastatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the metastatus params
func (o *MetastatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the metastatus params
func (o *MetastatusParams) WithContext(ctx context.Context) *MetastatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the metastatus params
func (o *MetastatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the metastatus params
func (o *MetastatusParams) WithHTTPClient(client *http.Client) *MetastatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the metastatus params
func (o *MetastatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCmdArgs adds the cmdArgs to the metastatus params
func (o *MetastatusParams) WithCmdArgs(cmdArgs []string) *MetastatusParams {
	o.SetCmdArgs(cmdArgs)
	return o
}

// SetCmdArgs adds the cmdArgs to the metastatus params
func (o *MetastatusParams) SetCmdArgs(cmdArgs []string) {
	o.CmdArgs = cmdArgs
}

// WriteToRequest writes these params to a swagger request
func (o *MetastatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesCmdArgs := o.CmdArgs

	joinedCmdArgs := swag.JoinByFormat(valuesCmdArgs, "csv")
	// query array param cmd_args
	if err := r.SetQueryParam("cmd_args", joinedCmdArgs...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
