// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/Yelp/paasta-tools-go/pkg/paasta_api/models"
)

// ResourcesReader is a Reader for the Resources structure.
type ResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewResourcesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewResourcesOK creates a ResourcesOK with default headers values
func NewResourcesOK() *ResourcesOK {
	return &ResourcesOK{}
}

/*ResourcesOK handles this case with default header values.

Resources in the cluster, filtered and grouped by parameters
*/
type ResourcesOK struct {
	Payload models.Resource
}

func (o *ResourcesOK) Error() string {
	return fmt.Sprintf("[GET /resources/utilization][%d] resourcesOK  %+v", 200, o.Payload)
}

func (o *ResourcesOK) GetPayload() models.Resource {
	return o.Payload
}

func (o *ResourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourcesBadRequest creates a ResourcesBadRequest with default headers values
func NewResourcesBadRequest() *ResourcesBadRequest {
	return &ResourcesBadRequest{}
}

/*ResourcesBadRequest handles this case with default header values.

Poorly formated query parameters
*/
type ResourcesBadRequest struct {
}

func (o *ResourcesBadRequest) Error() string {
	return fmt.Sprintf("[GET /resources/utilization][%d] resourcesBadRequest ", 400)
}

func (o *ResourcesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
