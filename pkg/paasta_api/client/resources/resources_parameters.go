// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewResourcesParams creates a new ResourcesParams object
// with the default values initialized.
func NewResourcesParams() *ResourcesParams {
	var ()
	return &ResourcesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewResourcesParamsWithTimeout creates a new ResourcesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewResourcesParamsWithTimeout(timeout time.Duration) *ResourcesParams {
	var ()
	return &ResourcesParams{

		timeout: timeout,
	}
}

// NewResourcesParamsWithContext creates a new ResourcesParams object
// with the default values initialized, and the ability to set a context for a request
func NewResourcesParamsWithContext(ctx context.Context) *ResourcesParams {
	var ()
	return &ResourcesParams{

		Context: ctx,
	}
}

// NewResourcesParamsWithHTTPClient creates a new ResourcesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewResourcesParamsWithHTTPClient(client *http.Client) *ResourcesParams {
	var ()
	return &ResourcesParams{
		HTTPClient: client,
	}
}

/*ResourcesParams contains all the parameters to send to the API endpoint
for the resources operation typically these are written to a http.Request
*/
type ResourcesParams struct {

	/*Filter
	  List of slave filters in format 'filter=attr_name:value1,value2&filter=attr2:value3,value4'. Matches attr_name=(value1 OR value2) AND attr2=(value3 OR value4)

	*/
	Filter []string
	/*Groupings
	  comma separated list of keys to group by

	*/
	Groupings []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the resources params
func (o *ResourcesParams) WithTimeout(timeout time.Duration) *ResourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resources params
func (o *ResourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resources params
func (o *ResourcesParams) WithContext(ctx context.Context) *ResourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resources params
func (o *ResourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resources params
func (o *ResourcesParams) WithHTTPClient(client *http.Client) *ResourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resources params
func (o *ResourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the resources params
func (o *ResourcesParams) WithFilter(filter []string) *ResourcesParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the resources params
func (o *ResourcesParams) SetFilter(filter []string) {
	o.Filter = filter
}

// WithGroupings adds the groupings to the resources params
func (o *ResourcesParams) WithGroupings(groupings []string) *ResourcesParams {
	o.SetGroupings(groupings)
	return o
}

// SetGroupings adds the groupings to the resources params
func (o *ResourcesParams) SetGroupings(groupings []string) {
	o.Groupings = groupings
}

// WriteToRequest writes these params to a swagger request
func (o *ResourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFilter := o.Filter

	joinedFilter := swag.JoinByFormat(valuesFilter, "multi")
	// query array param filter
	if err := r.SetQueryParam("filter", joinedFilter...); err != nil {
		return err
	}

	valuesGroupings := o.Groupings

	joinedGroupings := swag.JoinByFormat(valuesGroupings, "csv")
	// query array param groupings
	if err := r.SetQueryParam("groupings", joinedGroupings...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
