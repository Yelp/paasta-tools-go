// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceStatusMarathon instance status marathon
// swagger:model InstanceStatusMarathon
type InstanceStatusMarathon struct {

	// The number of different running versions of the same service (0 for stopped, 1 for running and 1+ for bouncing)
	// Required: true
	AppCount *int32 `json:"app_count"`

	// Statuses of each app of the service
	AppStatuses []*MarathonAppStatus `json:"app_statuses"`

	// Autoscaling information for the service
	AutoscalingInfo *MarathonAutoscalingInfo `json:"autoscaling_info,omitempty"`

	// backoff in seconds before launching the next task
	BackoffSeconds int32 `json:"backoff_seconds,omitempty"`

	// Method to transit between new and old versions of a service
	// Required: true
	// Enum: [brutal upthendown downthenup crossover]
	BounceMethod *string `json:"bounce_method"`

	// Deploy status of a marathon service
	// Enum: [Running Deploying Stopped Delayed Waiting Waiting for bounce NotRunning]
	DeployStatus string `json:"deploy_status,omitempty"`

	// ID of the desired version of a service instance
	DesiredAppID string `json:"desired_app_id,omitempty"`

	// Desired state of a service, for Marathon
	// Required: true
	// Enum: [start stop]
	DesiredState *string `json:"desired_state"`

	// Error message when a marathon job ID cannot be found
	ErrorMessage string `json:"error_message,omitempty"`

	// The number of desired instances of the service
	ExpectedInstanceCount int32 `json:"expected_instance_count,omitempty"`

	// Status of the service in Mesos
	Mesos *MarathonMesosStatus `json:"mesos,omitempty"`

	// The number of actual running instances of the service
	RunningInstanceCount int32 `json:"running_instance_count,omitempty"`

	// Status of the service in smartstack
	Smartstack *SmartstackStatus `json:"smartstack,omitempty"`
}

// Validate validates this instance status marathon
func (m *InstanceStatusMarathon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoscalingInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBounceMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMesos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartstack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceStatusMarathon) validateAppCount(formats strfmt.Registry) error {

	if err := validate.Required("app_count", "body", m.AppCount); err != nil {
		return err
	}

	return nil
}

func (m *InstanceStatusMarathon) validateAppStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.AppStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.AppStatuses); i++ {
		if swag.IsZero(m.AppStatuses[i]) { // not required
			continue
		}

		if m.AppStatuses[i] != nil {
			if err := m.AppStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("app_statuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InstanceStatusMarathon) validateAutoscalingInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoscalingInfo) { // not required
		return nil
	}

	if m.AutoscalingInfo != nil {
		if err := m.AutoscalingInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoscaling_info")
			}
			return err
		}
	}

	return nil
}

var instanceStatusMarathonTypeBounceMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["brutal","upthendown","downthenup","crossover"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceStatusMarathonTypeBounceMethodPropEnum = append(instanceStatusMarathonTypeBounceMethodPropEnum, v)
	}
}

const (

	// InstanceStatusMarathonBounceMethodBrutal captures enum value "brutal"
	InstanceStatusMarathonBounceMethodBrutal string = "brutal"

	// InstanceStatusMarathonBounceMethodUpthendown captures enum value "upthendown"
	InstanceStatusMarathonBounceMethodUpthendown string = "upthendown"

	// InstanceStatusMarathonBounceMethodDownthenup captures enum value "downthenup"
	InstanceStatusMarathonBounceMethodDownthenup string = "downthenup"

	// InstanceStatusMarathonBounceMethodCrossover captures enum value "crossover"
	InstanceStatusMarathonBounceMethodCrossover string = "crossover"
)

// prop value enum
func (m *InstanceStatusMarathon) validateBounceMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceStatusMarathonTypeBounceMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceStatusMarathon) validateBounceMethod(formats strfmt.Registry) error {

	if err := validate.Required("bounce_method", "body", m.BounceMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateBounceMethodEnum("bounce_method", "body", *m.BounceMethod); err != nil {
		return err
	}

	return nil
}

var instanceStatusMarathonTypeDeployStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Deploying","Stopped","Delayed","Waiting","Waiting for bounce","NotRunning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceStatusMarathonTypeDeployStatusPropEnum = append(instanceStatusMarathonTypeDeployStatusPropEnum, v)
	}
}

const (

	// InstanceStatusMarathonDeployStatusRunning captures enum value "Running"
	InstanceStatusMarathonDeployStatusRunning string = "Running"

	// InstanceStatusMarathonDeployStatusDeploying captures enum value "Deploying"
	InstanceStatusMarathonDeployStatusDeploying string = "Deploying"

	// InstanceStatusMarathonDeployStatusStopped captures enum value "Stopped"
	InstanceStatusMarathonDeployStatusStopped string = "Stopped"

	// InstanceStatusMarathonDeployStatusDelayed captures enum value "Delayed"
	InstanceStatusMarathonDeployStatusDelayed string = "Delayed"

	// InstanceStatusMarathonDeployStatusWaiting captures enum value "Waiting"
	InstanceStatusMarathonDeployStatusWaiting string = "Waiting"

	// InstanceStatusMarathonDeployStatusWaitingForBounce captures enum value "Waiting for bounce"
	InstanceStatusMarathonDeployStatusWaitingForBounce string = "Waiting for bounce"

	// InstanceStatusMarathonDeployStatusNotRunning captures enum value "NotRunning"
	InstanceStatusMarathonDeployStatusNotRunning string = "NotRunning"
)

// prop value enum
func (m *InstanceStatusMarathon) validateDeployStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceStatusMarathonTypeDeployStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceStatusMarathon) validateDeployStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DeployStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeployStatusEnum("deploy_status", "body", m.DeployStatus); err != nil {
		return err
	}

	return nil
}

var instanceStatusMarathonTypeDesiredStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["start","stop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceStatusMarathonTypeDesiredStatePropEnum = append(instanceStatusMarathonTypeDesiredStatePropEnum, v)
	}
}

const (

	// InstanceStatusMarathonDesiredStateStart captures enum value "start"
	InstanceStatusMarathonDesiredStateStart string = "start"

	// InstanceStatusMarathonDesiredStateStop captures enum value "stop"
	InstanceStatusMarathonDesiredStateStop string = "stop"
)

// prop value enum
func (m *InstanceStatusMarathon) validateDesiredStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceStatusMarathonTypeDesiredStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceStatusMarathon) validateDesiredState(formats strfmt.Registry) error {

	if err := validate.Required("desired_state", "body", m.DesiredState); err != nil {
		return err
	}

	// value enum
	if err := m.validateDesiredStateEnum("desired_state", "body", *m.DesiredState); err != nil {
		return err
	}

	return nil
}

func (m *InstanceStatusMarathon) validateMesos(formats strfmt.Registry) error {

	if swag.IsZero(m.Mesos) { // not required
		return nil
	}

	if m.Mesos != nil {
		if err := m.Mesos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mesos")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceStatusMarathon) validateSmartstack(formats strfmt.Registry) error {

	if swag.IsZero(m.Smartstack) { // not required
		return nil
	}

	if m.Smartstack != nil {
		if err := m.Smartstack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smartstack")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceStatusMarathon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceStatusMarathon) UnmarshalBinary(b []byte) error {
	var res InstanceStatusMarathon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
