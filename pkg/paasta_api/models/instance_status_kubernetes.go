// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceStatusKubernetes instance status kubernetes
// swagger:model InstanceStatusKubernetes
type InstanceStatusKubernetes struct {

	// The number of different running versions of the same service (0 for stopped, 1 for running and 1+ for bouncing)
	// Required: true
	AppCount *int32 `json:"app_count"`

	// ID of the desired version of a service instance
	AppID string `json:"app_id,omitempty"`

	// backoff in seconds before launching the next task
	BackoffSeconds int32 `json:"backoff_seconds,omitempty"`

	// Method to transit between new and old versions of a service
	// Required: true
	// Enum: [brutal upthendown downthenup crossover]
	BounceMethod *string `json:"bounce_method"`

	// Unix timestamp when this app was created
	CreateTimestamp float32 `json:"create_timestamp,omitempty"`

	// Deploy status of a Kubernetes service
	// Enum: [Running Deploying Stopped Delayed Waiting NotRunning]
	DeployStatus string `json:"deploy_status,omitempty"`

	// Desired state of a service, for Kubernetes
	// Required: true
	// Enum: [start stop]
	DesiredState *string `json:"desired_state"`

	// Error message when a kubernetes object (Deployment/Statefulset) cannot be found
	ErrorMessage string `json:"error_message,omitempty"`

	// The number of desired instances of the service
	ExpectedInstanceCount int32 `json:"expected_instance_count,omitempty"`

	// The namespace this app is running
	Namespace string `json:"namespace,omitempty"`

	// Pods associated to this app
	Pods []*KubernetesPod `json:"pods"`

	// ReplicaSets associated to this app
	Replicasets []*KubernetesReplicaSet `json:"replicasets"`

	// The number of actual running instances of the service
	RunningInstanceCount int32 `json:"running_instance_count,omitempty"`

	// Status of the service in smartstack
	Smartstack *SmartstackStatus `json:"smartstack,omitempty"`
}

// Validate validates this instance status kubernetes
func (m *InstanceStatusKubernetes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBounceMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicasets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartstack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceStatusKubernetes) validateAppCount(formats strfmt.Registry) error {

	if err := validate.Required("app_count", "body", m.AppCount); err != nil {
		return err
	}

	return nil
}

var instanceStatusKubernetesTypeBounceMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["brutal","upthendown","downthenup","crossover"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceStatusKubernetesTypeBounceMethodPropEnum = append(instanceStatusKubernetesTypeBounceMethodPropEnum, v)
	}
}

const (

	// InstanceStatusKubernetesBounceMethodBrutal captures enum value "brutal"
	InstanceStatusKubernetesBounceMethodBrutal string = "brutal"

	// InstanceStatusKubernetesBounceMethodUpthendown captures enum value "upthendown"
	InstanceStatusKubernetesBounceMethodUpthendown string = "upthendown"

	// InstanceStatusKubernetesBounceMethodDownthenup captures enum value "downthenup"
	InstanceStatusKubernetesBounceMethodDownthenup string = "downthenup"

	// InstanceStatusKubernetesBounceMethodCrossover captures enum value "crossover"
	InstanceStatusKubernetesBounceMethodCrossover string = "crossover"
)

// prop value enum
func (m *InstanceStatusKubernetes) validateBounceMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceStatusKubernetesTypeBounceMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceStatusKubernetes) validateBounceMethod(formats strfmt.Registry) error {

	if err := validate.Required("bounce_method", "body", m.BounceMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateBounceMethodEnum("bounce_method", "body", *m.BounceMethod); err != nil {
		return err
	}

	return nil
}

var instanceStatusKubernetesTypeDeployStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Deploying","Stopped","Delayed","Waiting","NotRunning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceStatusKubernetesTypeDeployStatusPropEnum = append(instanceStatusKubernetesTypeDeployStatusPropEnum, v)
	}
}

const (

	// InstanceStatusKubernetesDeployStatusRunning captures enum value "Running"
	InstanceStatusKubernetesDeployStatusRunning string = "Running"

	// InstanceStatusKubernetesDeployStatusDeploying captures enum value "Deploying"
	InstanceStatusKubernetesDeployStatusDeploying string = "Deploying"

	// InstanceStatusKubernetesDeployStatusStopped captures enum value "Stopped"
	InstanceStatusKubernetesDeployStatusStopped string = "Stopped"

	// InstanceStatusKubernetesDeployStatusDelayed captures enum value "Delayed"
	InstanceStatusKubernetesDeployStatusDelayed string = "Delayed"

	// InstanceStatusKubernetesDeployStatusWaiting captures enum value "Waiting"
	InstanceStatusKubernetesDeployStatusWaiting string = "Waiting"

	// InstanceStatusKubernetesDeployStatusNotRunning captures enum value "NotRunning"
	InstanceStatusKubernetesDeployStatusNotRunning string = "NotRunning"
)

// prop value enum
func (m *InstanceStatusKubernetes) validateDeployStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceStatusKubernetesTypeDeployStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceStatusKubernetes) validateDeployStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DeployStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeployStatusEnum("deploy_status", "body", m.DeployStatus); err != nil {
		return err
	}

	return nil
}

var instanceStatusKubernetesTypeDesiredStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["start","stop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceStatusKubernetesTypeDesiredStatePropEnum = append(instanceStatusKubernetesTypeDesiredStatePropEnum, v)
	}
}

const (

	// InstanceStatusKubernetesDesiredStateStart captures enum value "start"
	InstanceStatusKubernetesDesiredStateStart string = "start"

	// InstanceStatusKubernetesDesiredStateStop captures enum value "stop"
	InstanceStatusKubernetesDesiredStateStop string = "stop"
)

// prop value enum
func (m *InstanceStatusKubernetes) validateDesiredStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceStatusKubernetesTypeDesiredStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceStatusKubernetes) validateDesiredState(formats strfmt.Registry) error {

	if err := validate.Required("desired_state", "body", m.DesiredState); err != nil {
		return err
	}

	// value enum
	if err := m.validateDesiredStateEnum("desired_state", "body", *m.DesiredState); err != nil {
		return err
	}

	return nil
}

func (m *InstanceStatusKubernetes) validatePods(formats strfmt.Registry) error {

	if swag.IsZero(m.Pods) { // not required
		return nil
	}

	for i := 0; i < len(m.Pods); i++ {
		if swag.IsZero(m.Pods[i]) { // not required
			continue
		}

		if m.Pods[i] != nil {
			if err := m.Pods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InstanceStatusKubernetes) validateReplicasets(formats strfmt.Registry) error {

	if swag.IsZero(m.Replicasets) { // not required
		return nil
	}

	for i := 0; i < len(m.Replicasets); i++ {
		if swag.IsZero(m.Replicasets[i]) { // not required
			continue
		}

		if m.Replicasets[i] != nil {
			if err := m.Replicasets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InstanceStatusKubernetes) validateSmartstack(formats strfmt.Registry) error {

	if swag.IsZero(m.Smartstack) { // not required
		return nil
	}

	if m.Smartstack != nil {
		if err := m.Smartstack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smartstack")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceStatusKubernetes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceStatusKubernetes) UnmarshalBinary(b []byte) error {
	var res InstanceStatusKubernetes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
