// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MarathonMesosRunningTask marathon mesos running task
// swagger:model MarathonMesosRunningTask
type MarathonMesosRunningTask struct {

	// The portion of a CPU that the task can use
	CPUShares *FloatAndError `json:"cpu_shares,omitempty"`

	// The number of seconds of CPU time the task has used
	CPUUsedSeconds *FloatAndError `json:"cpu_used_seconds,omitempty"`

	// The unix timestamp at which the task was deployed
	DeployedTimestamp float32 `json:"deployed_timestamp,omitempty"`

	// The duration over which the task has been running in seconds
	DurationSeconds int32 `json:"duration_seconds,omitempty"`

	// Name of the Mesos agent on which this task is running
	Hostname string `json:"hostname,omitempty"`

	// The ID of the task in Mesos
	ID string `json:"id,omitempty"`

	// The maximum amount of memory the task is allowed to use
	MemLimit *IntegerAndError `json:"mem_limit,omitempty"`

	// The tasks's resident set size
	Rss *IntegerAndError `json:"rss,omitempty"`

	// Stdout and stderr tail of the task
	TailLines *TaskTailLines `json:"tail_lines,omitempty"`
}

// Validate validates this marathon mesos running task
func (m *MarathonMesosRunningTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUShares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUUsedSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTailLines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarathonMesosRunningTask) validateCPUShares(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUShares) { // not required
		return nil
	}

	if m.CPUShares != nil {
		if err := m.CPUShares.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu_shares")
			}
			return err
		}
	}

	return nil
}

func (m *MarathonMesosRunningTask) validateCPUUsedSeconds(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUUsedSeconds) { // not required
		return nil
	}

	if m.CPUUsedSeconds != nil {
		if err := m.CPUUsedSeconds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu_used_seconds")
			}
			return err
		}
	}

	return nil
}

func (m *MarathonMesosRunningTask) validateMemLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.MemLimit) { // not required
		return nil
	}

	if m.MemLimit != nil {
		if err := m.MemLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mem_limit")
			}
			return err
		}
	}

	return nil
}

func (m *MarathonMesosRunningTask) validateRss(formats strfmt.Registry) error {

	if swag.IsZero(m.Rss) { // not required
		return nil
	}

	if m.Rss != nil {
		if err := m.Rss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rss")
			}
			return err
		}
	}

	return nil
}

func (m *MarathonMesosRunningTask) validateTailLines(formats strfmt.Registry) error {

	if swag.IsZero(m.TailLines) { // not required
		return nil
	}

	if m.TailLines != nil {
		if err := m.TailLines.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tail_lines")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarathonMesosRunningTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarathonMesosRunningTask) UnmarshalBinary(b []byte) error {
	var res MarathonMesosRunningTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
