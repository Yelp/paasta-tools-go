// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MarathonAppStatus marathon app status
// swagger:model MarathonAppStatus
type MarathonAppStatus struct {

	// Backoff in seconds before launching next task
	BackoffSeconds int32 `json:"backoff_seconds,omitempty"`

	// Unix timestamp when this app was created
	CreateTimestamp float32 `json:"create_timestamp,omitempty"`

	// Marathon dashboard URL for this app
	DashboardURL string `json:"dashboard_url,omitempty"`

	// Deploy status of this app
	DeployStatus string `json:"deploy_status,omitempty"`

	// Tasks associated to this app
	Tasks []*MarathonTask `json:"tasks"`

	// Number of healthy tasks for this app
	TasksHealthy int32 `json:"tasks_healthy,omitempty"`

	// Number running tasks for this app
	TasksRunning int32 `json:"tasks_running,omitempty"`

	// Number of staged tasks for this app
	TasksStaged int32 `json:"tasks_staged,omitempty"`

	// Total number of tasks for this app
	TasksTotal int32 `json:"tasks_total,omitempty"`

	// Mapping of reason offer was refused to the number of times that type of refusal was seen
	UnusedOfferReasonCounts interface{} `json:"unused_offer_reason_counts,omitempty"`
}

// Validate validates this marathon app status
func (m *MarathonAppStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarathonAppStatus) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarathonAppStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarathonAppStatus) UnmarshalBinary(b []byte) error {
	var res MarathonAppStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
