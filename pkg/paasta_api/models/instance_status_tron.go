// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceStatusTron instance status tron
// swagger:model InstanceStatusTron
type InstanceStatusTron struct {

	// The command of the action
	ActionCommand string `json:"action_command,omitempty"`

	// The name of the action
	ActionName string `json:"action_name,omitempty"`

	// The raw command of the action
	ActionRawCommand string `json:"action_raw_command,omitempty"`

	// The start time of the action
	ActionStartTime string `json:"action_start_time,omitempty"`

	// The state of the action
	ActionState string `json:"action_state,omitempty"`

	// The stderr command of the action
	ActionStderr string `json:"action_stderr,omitempty"`

	// The stdout command of the action
	ActionStdout string `json:"action_stdout,omitempty"`

	// The name of this job
	// Required: true
	JobName *string `json:"job_name"`

	// The job schedule of the job
	JobSchedule string `json:"job_schedule,omitempty"`

	// The status of the job
	JobStatus string `json:"job_status,omitempty"`

	// The dashboard url of the job
	// Required: true
	JobURL *string `json:"job_url"`
}

// Validate validates this instance status tron
func (m *InstanceStatusTron) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceStatusTron) validateJobName(formats strfmt.Registry) error {

	if err := validate.Required("job_name", "body", m.JobName); err != nil {
		return err
	}

	return nil
}

func (m *InstanceStatusTron) validateJobURL(formats strfmt.Registry) error {

	if err := validate.Required("job_url", "body", m.JobURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceStatusTron) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceStatusTron) UnmarshalBinary(b []byte) error {
	var res InstanceStatusTron
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
