/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package paastaapi

import (
	"encoding/json"
)

// InstanceStatusMarathon struct for InstanceStatusMarathon
type InstanceStatusMarathon struct {
	// The number of different running versions of the same service (0 for stopped, 1 for running and 1+ for bouncing)
	AppCount int32 `json:"app_count"`
	// Statuses of each app of the service
	AppStatuses *[]MarathonAppStatus `json:"app_statuses,omitempty"`
	AutoscalingInfo *MarathonAutoscalingInfo `json:"autoscaling_info,omitempty"`
	// backoff in seconds before launching the next task
	BackoffSeconds *int32 `json:"backoff_seconds,omitempty"`
	// Method to transit between new and old versions of a service
	BounceMethod string `json:"bounce_method"`
	// Deploy status of a marathon service
	DeployStatus *string `json:"deploy_status,omitempty"`
	// ID of the desired version of a service instance
	DesiredAppId *string `json:"desired_app_id,omitempty"`
	// Desired state of a service, for Marathon
	DesiredState string `json:"desired_state"`
	Envoy *EnvoyStatus `json:"envoy,omitempty"`
	// Error message when a marathon job ID cannot be found
	ErrorMessage *string `json:"error_message,omitempty"`
	// The number of desired instances of the service
	ExpectedInstanceCount *int32 `json:"expected_instance_count,omitempty"`
	Mesos *MarathonMesosStatus `json:"mesos,omitempty"`
	// The number of actual running instances of the service
	RunningInstanceCount *int32 `json:"running_instance_count,omitempty"`
	Smartstack *SmartstackStatus `json:"smartstack,omitempty"`
}

// NewInstanceStatusMarathon instantiates a new InstanceStatusMarathon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceStatusMarathon(appCount int32, bounceMethod string, desiredState string, ) *InstanceStatusMarathon {
	this := InstanceStatusMarathon{}
	this.AppCount = appCount
	this.BounceMethod = bounceMethod
	this.DesiredState = desiredState
	return &this
}

// NewInstanceStatusMarathonWithDefaults instantiates a new InstanceStatusMarathon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceStatusMarathonWithDefaults() *InstanceStatusMarathon {
	this := InstanceStatusMarathon{}
	return &this
}

// GetAppCount returns the AppCount field value
func (o *InstanceStatusMarathon) GetAppCount() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AppCount
}

// GetAppCountOk returns a tuple with the AppCount field value
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetAppCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AppCount, true
}

// SetAppCount sets field value
func (o *InstanceStatusMarathon) SetAppCount(v int32) {
	o.AppCount = v
}

// GetAppStatuses returns the AppStatuses field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetAppStatuses() []MarathonAppStatus {
	if o == nil || o.AppStatuses == nil {
		var ret []MarathonAppStatus
		return ret
	}
	return *o.AppStatuses
}

// GetAppStatusesOk returns a tuple with the AppStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetAppStatusesOk() (*[]MarathonAppStatus, bool) {
	if o == nil || o.AppStatuses == nil {
		return nil, false
	}
	return o.AppStatuses, true
}

// HasAppStatuses returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasAppStatuses() bool {
	if o != nil && o.AppStatuses != nil {
		return true
	}

	return false
}

// SetAppStatuses gets a reference to the given []MarathonAppStatus and assigns it to the AppStatuses field.
func (o *InstanceStatusMarathon) SetAppStatuses(v []MarathonAppStatus) {
	o.AppStatuses = &v
}

// GetAutoscalingInfo returns the AutoscalingInfo field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetAutoscalingInfo() MarathonAutoscalingInfo {
	if o == nil || o.AutoscalingInfo == nil {
		var ret MarathonAutoscalingInfo
		return ret
	}
	return *o.AutoscalingInfo
}

// GetAutoscalingInfoOk returns a tuple with the AutoscalingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetAutoscalingInfoOk() (*MarathonAutoscalingInfo, bool) {
	if o == nil || o.AutoscalingInfo == nil {
		return nil, false
	}
	return o.AutoscalingInfo, true
}

// HasAutoscalingInfo returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasAutoscalingInfo() bool {
	if o != nil && o.AutoscalingInfo != nil {
		return true
	}

	return false
}

// SetAutoscalingInfo gets a reference to the given MarathonAutoscalingInfo and assigns it to the AutoscalingInfo field.
func (o *InstanceStatusMarathon) SetAutoscalingInfo(v MarathonAutoscalingInfo) {
	o.AutoscalingInfo = &v
}

// GetBackoffSeconds returns the BackoffSeconds field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetBackoffSeconds() int32 {
	if o == nil || o.BackoffSeconds == nil {
		var ret int32
		return ret
	}
	return *o.BackoffSeconds
}

// GetBackoffSecondsOk returns a tuple with the BackoffSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetBackoffSecondsOk() (*int32, bool) {
	if o == nil || o.BackoffSeconds == nil {
		return nil, false
	}
	return o.BackoffSeconds, true
}

// HasBackoffSeconds returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasBackoffSeconds() bool {
	if o != nil && o.BackoffSeconds != nil {
		return true
	}

	return false
}

// SetBackoffSeconds gets a reference to the given int32 and assigns it to the BackoffSeconds field.
func (o *InstanceStatusMarathon) SetBackoffSeconds(v int32) {
	o.BackoffSeconds = &v
}

// GetBounceMethod returns the BounceMethod field value
func (o *InstanceStatusMarathon) GetBounceMethod() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BounceMethod
}

// GetBounceMethodOk returns a tuple with the BounceMethod field value
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetBounceMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BounceMethod, true
}

// SetBounceMethod sets field value
func (o *InstanceStatusMarathon) SetBounceMethod(v string) {
	o.BounceMethod = v
}

// GetDeployStatus returns the DeployStatus field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetDeployStatus() string {
	if o == nil || o.DeployStatus == nil {
		var ret string
		return ret
	}
	return *o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetDeployStatusOk() (*string, bool) {
	if o == nil || o.DeployStatus == nil {
		return nil, false
	}
	return o.DeployStatus, true
}

// HasDeployStatus returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasDeployStatus() bool {
	if o != nil && o.DeployStatus != nil {
		return true
	}

	return false
}

// SetDeployStatus gets a reference to the given string and assigns it to the DeployStatus field.
func (o *InstanceStatusMarathon) SetDeployStatus(v string) {
	o.DeployStatus = &v
}

// GetDesiredAppId returns the DesiredAppId field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetDesiredAppId() string {
	if o == nil || o.DesiredAppId == nil {
		var ret string
		return ret
	}
	return *o.DesiredAppId
}

// GetDesiredAppIdOk returns a tuple with the DesiredAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetDesiredAppIdOk() (*string, bool) {
	if o == nil || o.DesiredAppId == nil {
		return nil, false
	}
	return o.DesiredAppId, true
}

// HasDesiredAppId returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasDesiredAppId() bool {
	if o != nil && o.DesiredAppId != nil {
		return true
	}

	return false
}

// SetDesiredAppId gets a reference to the given string and assigns it to the DesiredAppId field.
func (o *InstanceStatusMarathon) SetDesiredAppId(v string) {
	o.DesiredAppId = &v
}

// GetDesiredState returns the DesiredState field value
func (o *InstanceStatusMarathon) GetDesiredState() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DesiredState
}

// GetDesiredStateOk returns a tuple with the DesiredState field value
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetDesiredStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DesiredState, true
}

// SetDesiredState sets field value
func (o *InstanceStatusMarathon) SetDesiredState(v string) {
	o.DesiredState = v
}

// GetEnvoy returns the Envoy field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetEnvoy() EnvoyStatus {
	if o == nil || o.Envoy == nil {
		var ret EnvoyStatus
		return ret
	}
	return *o.Envoy
}

// GetEnvoyOk returns a tuple with the Envoy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetEnvoyOk() (*EnvoyStatus, bool) {
	if o == nil || o.Envoy == nil {
		return nil, false
	}
	return o.Envoy, true
}

// HasEnvoy returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasEnvoy() bool {
	if o != nil && o.Envoy != nil {
		return true
	}

	return false
}

// SetEnvoy gets a reference to the given EnvoyStatus and assigns it to the Envoy field.
func (o *InstanceStatusMarathon) SetEnvoy(v EnvoyStatus) {
	o.Envoy = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *InstanceStatusMarathon) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetExpectedInstanceCount returns the ExpectedInstanceCount field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetExpectedInstanceCount() int32 {
	if o == nil || o.ExpectedInstanceCount == nil {
		var ret int32
		return ret
	}
	return *o.ExpectedInstanceCount
}

// GetExpectedInstanceCountOk returns a tuple with the ExpectedInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetExpectedInstanceCountOk() (*int32, bool) {
	if o == nil || o.ExpectedInstanceCount == nil {
		return nil, false
	}
	return o.ExpectedInstanceCount, true
}

// HasExpectedInstanceCount returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasExpectedInstanceCount() bool {
	if o != nil && o.ExpectedInstanceCount != nil {
		return true
	}

	return false
}

// SetExpectedInstanceCount gets a reference to the given int32 and assigns it to the ExpectedInstanceCount field.
func (o *InstanceStatusMarathon) SetExpectedInstanceCount(v int32) {
	o.ExpectedInstanceCount = &v
}

// GetMesos returns the Mesos field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetMesos() MarathonMesosStatus {
	if o == nil || o.Mesos == nil {
		var ret MarathonMesosStatus
		return ret
	}
	return *o.Mesos
}

// GetMesosOk returns a tuple with the Mesos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetMesosOk() (*MarathonMesosStatus, bool) {
	if o == nil || o.Mesos == nil {
		return nil, false
	}
	return o.Mesos, true
}

// HasMesos returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasMesos() bool {
	if o != nil && o.Mesos != nil {
		return true
	}

	return false
}

// SetMesos gets a reference to the given MarathonMesosStatus and assigns it to the Mesos field.
func (o *InstanceStatusMarathon) SetMesos(v MarathonMesosStatus) {
	o.Mesos = &v
}

// GetRunningInstanceCount returns the RunningInstanceCount field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetRunningInstanceCount() int32 {
	if o == nil || o.RunningInstanceCount == nil {
		var ret int32
		return ret
	}
	return *o.RunningInstanceCount
}

// GetRunningInstanceCountOk returns a tuple with the RunningInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetRunningInstanceCountOk() (*int32, bool) {
	if o == nil || o.RunningInstanceCount == nil {
		return nil, false
	}
	return o.RunningInstanceCount, true
}

// HasRunningInstanceCount returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasRunningInstanceCount() bool {
	if o != nil && o.RunningInstanceCount != nil {
		return true
	}

	return false
}

// SetRunningInstanceCount gets a reference to the given int32 and assigns it to the RunningInstanceCount field.
func (o *InstanceStatusMarathon) SetRunningInstanceCount(v int32) {
	o.RunningInstanceCount = &v
}

// GetSmartstack returns the Smartstack field value if set, zero value otherwise.
func (o *InstanceStatusMarathon) GetSmartstack() SmartstackStatus {
	if o == nil || o.Smartstack == nil {
		var ret SmartstackStatus
		return ret
	}
	return *o.Smartstack
}

// GetSmartstackOk returns a tuple with the Smartstack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatusMarathon) GetSmartstackOk() (*SmartstackStatus, bool) {
	if o == nil || o.Smartstack == nil {
		return nil, false
	}
	return o.Smartstack, true
}

// HasSmartstack returns a boolean if a field has been set.
func (o *InstanceStatusMarathon) HasSmartstack() bool {
	if o != nil && o.Smartstack != nil {
		return true
	}

	return false
}

// SetSmartstack gets a reference to the given SmartstackStatus and assigns it to the Smartstack field.
func (o *InstanceStatusMarathon) SetSmartstack(v SmartstackStatus) {
	o.Smartstack = &v
}

func (o InstanceStatusMarathon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["app_count"] = o.AppCount
	}
	if o.AppStatuses != nil {
		toSerialize["app_statuses"] = o.AppStatuses
	}
	if o.AutoscalingInfo != nil {
		toSerialize["autoscaling_info"] = o.AutoscalingInfo
	}
	if o.BackoffSeconds != nil {
		toSerialize["backoff_seconds"] = o.BackoffSeconds
	}
	if true {
		toSerialize["bounce_method"] = o.BounceMethod
	}
	if o.DeployStatus != nil {
		toSerialize["deploy_status"] = o.DeployStatus
	}
	if o.DesiredAppId != nil {
		toSerialize["desired_app_id"] = o.DesiredAppId
	}
	if true {
		toSerialize["desired_state"] = o.DesiredState
	}
	if o.Envoy != nil {
		toSerialize["envoy"] = o.Envoy
	}
	if o.ErrorMessage != nil {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if o.ExpectedInstanceCount != nil {
		toSerialize["expected_instance_count"] = o.ExpectedInstanceCount
	}
	if o.Mesos != nil {
		toSerialize["mesos"] = o.Mesos
	}
	if o.RunningInstanceCount != nil {
		toSerialize["running_instance_count"] = o.RunningInstanceCount
	}
	if o.Smartstack != nil {
		toSerialize["smartstack"] = o.Smartstack
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceStatusMarathon struct {
	value *InstanceStatusMarathon
	isSet bool
}

func (v NullableInstanceStatusMarathon) Get() *InstanceStatusMarathon {
	return v.value
}

func (v *NullableInstanceStatusMarathon) Set(val *InstanceStatusMarathon) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceStatusMarathon) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceStatusMarathon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceStatusMarathon(val *InstanceStatusMarathon) *NullableInstanceStatusMarathon {
	return &NullableInstanceStatusMarathon{value: val, isSet: true}
}

func (v NullableInstanceStatusMarathon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceStatusMarathon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


