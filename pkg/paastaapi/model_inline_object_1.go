/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package paastaapi

import (
	"encoding/json"
)

// InlineObject1 struct for InlineObject1
type InlineObject1 struct {
	CalculatedInstances *int32 `json:"calculated_instances,omitempty"`
	DesiredInstances *int32 `json:"desired_instances,omitempty"`
}

// NewInlineObject1 instantiates a new InlineObject1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1() *InlineObject1 {
	this := InlineObject1{}
	return &this
}

// NewInlineObject1WithDefaults instantiates a new InlineObject1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1WithDefaults() *InlineObject1 {
	this := InlineObject1{}
	return &this
}

// GetCalculatedInstances returns the CalculatedInstances field value if set, zero value otherwise.
func (o *InlineObject1) GetCalculatedInstances() int32 {
	if o == nil || o.CalculatedInstances == nil {
		var ret int32
		return ret
	}
	return *o.CalculatedInstances
}

// GetCalculatedInstancesOk returns a tuple with the CalculatedInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1) GetCalculatedInstancesOk() (*int32, bool) {
	if o == nil || o.CalculatedInstances == nil {
		return nil, false
	}
	return o.CalculatedInstances, true
}

// HasCalculatedInstances returns a boolean if a field has been set.
func (o *InlineObject1) HasCalculatedInstances() bool {
	if o != nil && o.CalculatedInstances != nil {
		return true
	}

	return false
}

// SetCalculatedInstances gets a reference to the given int32 and assigns it to the CalculatedInstances field.
func (o *InlineObject1) SetCalculatedInstances(v int32) {
	o.CalculatedInstances = &v
}

// GetDesiredInstances returns the DesiredInstances field value if set, zero value otherwise.
func (o *InlineObject1) GetDesiredInstances() int32 {
	if o == nil || o.DesiredInstances == nil {
		var ret int32
		return ret
	}
	return *o.DesiredInstances
}

// GetDesiredInstancesOk returns a tuple with the DesiredInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1) GetDesiredInstancesOk() (*int32, bool) {
	if o == nil || o.DesiredInstances == nil {
		return nil, false
	}
	return o.DesiredInstances, true
}

// HasDesiredInstances returns a boolean if a field has been set.
func (o *InlineObject1) HasDesiredInstances() bool {
	if o != nil && o.DesiredInstances != nil {
		return true
	}

	return false
}

// SetDesiredInstances gets a reference to the given int32 and assigns it to the DesiredInstances field.
func (o *InlineObject1) SetDesiredInstances(v int32) {
	o.DesiredInstances = &v
}

func (o InlineObject1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CalculatedInstances != nil {
		toSerialize["calculated_instances"] = o.CalculatedInstances
	}
	if o.DesiredInstances != nil {
		toSerialize["desired_instances"] = o.DesiredInstances
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1 struct {
	value *InlineObject1
	isSet bool
}

func (v NullableInlineObject1) Get() *InlineObject1 {
	return v.value
}

func (v *NullableInlineObject1) Set(val *InlineObject1) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1(val *InlineObject1) *NullableInlineObject1 {
	return &NullableInlineObject1{value: val, isSet: true}
}

func (v NullableInlineObject1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


