/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paastaapi

import (
	"encoding/json"
)

// IntegerAndError struct for IntegerAndError
type IntegerAndError struct {
	ErrorMessage *string `json:"error_message,omitempty"`
	Value *int32 `json:"value,omitempty"`
}

// NewIntegerAndError instantiates a new IntegerAndError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegerAndError() *IntegerAndError {
	this := IntegerAndError{}
	return &this
}

// NewIntegerAndErrorWithDefaults instantiates a new IntegerAndError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegerAndErrorWithDefaults() *IntegerAndError {
	this := IntegerAndError{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *IntegerAndError) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegerAndError) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *IntegerAndError) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *IntegerAndError) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IntegerAndError) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegerAndError) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IntegerAndError) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *IntegerAndError) SetValue(v int32) {
	o.Value = &v
}

func (o IntegerAndError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorMessage != nil {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableIntegerAndError struct {
	value *IntegerAndError
	isSet bool
}

func (v NullableIntegerAndError) Get() *IntegerAndError {
	return v.value
}

func (v *NullableIntegerAndError) Set(val *IntegerAndError) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegerAndError) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegerAndError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegerAndError(val *IntegerAndError) *NullableIntegerAndError {
	return &NullableIntegerAndError{value: val, isSet: true}
}

func (v NullableIntegerAndError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegerAndError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


