/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package paastaapi

import (
	"encoding/json"
)

// EnvoyStatus struct for EnvoyStatus
type EnvoyStatus struct {
	// Number of backends expected to be present in each location
	ExpectedBackendsPerLocation *int32 `json:"expected_backends_per_location,omitempty"`
	// Locations the service is deployed
	Locations *[]EnvoyLocation `json:"locations,omitempty"`
	// Registration name of the service in Smartstack
	Registration *string `json:"registration,omitempty"`
}

// NewEnvoyStatus instantiates a new EnvoyStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvoyStatus() *EnvoyStatus {
	this := EnvoyStatus{}
	return &this
}

// NewEnvoyStatusWithDefaults instantiates a new EnvoyStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvoyStatusWithDefaults() *EnvoyStatus {
	this := EnvoyStatus{}
	return &this
}

// GetExpectedBackendsPerLocation returns the ExpectedBackendsPerLocation field value if set, zero value otherwise.
func (o *EnvoyStatus) GetExpectedBackendsPerLocation() int32 {
	if o == nil || o.ExpectedBackendsPerLocation == nil {
		var ret int32
		return ret
	}
	return *o.ExpectedBackendsPerLocation
}

// GetExpectedBackendsPerLocationOk returns a tuple with the ExpectedBackendsPerLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvoyStatus) GetExpectedBackendsPerLocationOk() (*int32, bool) {
	if o == nil || o.ExpectedBackendsPerLocation == nil {
		return nil, false
	}
	return o.ExpectedBackendsPerLocation, true
}

// HasExpectedBackendsPerLocation returns a boolean if a field has been set.
func (o *EnvoyStatus) HasExpectedBackendsPerLocation() bool {
	if o != nil && o.ExpectedBackendsPerLocation != nil {
		return true
	}

	return false
}

// SetExpectedBackendsPerLocation gets a reference to the given int32 and assigns it to the ExpectedBackendsPerLocation field.
func (o *EnvoyStatus) SetExpectedBackendsPerLocation(v int32) {
	o.ExpectedBackendsPerLocation = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *EnvoyStatus) GetLocations() []EnvoyLocation {
	if o == nil || o.Locations == nil {
		var ret []EnvoyLocation
		return ret
	}
	return *o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvoyStatus) GetLocationsOk() (*[]EnvoyLocation, bool) {
	if o == nil || o.Locations == nil {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *EnvoyStatus) HasLocations() bool {
	if o != nil && o.Locations != nil {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []EnvoyLocation and assigns it to the Locations field.
func (o *EnvoyStatus) SetLocations(v []EnvoyLocation) {
	o.Locations = &v
}

// GetRegistration returns the Registration field value if set, zero value otherwise.
func (o *EnvoyStatus) GetRegistration() string {
	if o == nil || o.Registration == nil {
		var ret string
		return ret
	}
	return *o.Registration
}

// GetRegistrationOk returns a tuple with the Registration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvoyStatus) GetRegistrationOk() (*string, bool) {
	if o == nil || o.Registration == nil {
		return nil, false
	}
	return o.Registration, true
}

// HasRegistration returns a boolean if a field has been set.
func (o *EnvoyStatus) HasRegistration() bool {
	if o != nil && o.Registration != nil {
		return true
	}

	return false
}

// SetRegistration gets a reference to the given string and assigns it to the Registration field.
func (o *EnvoyStatus) SetRegistration(v string) {
	o.Registration = &v
}

func (o EnvoyStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpectedBackendsPerLocation != nil {
		toSerialize["expected_backends_per_location"] = o.ExpectedBackendsPerLocation
	}
	if o.Locations != nil {
		toSerialize["locations"] = o.Locations
	}
	if o.Registration != nil {
		toSerialize["registration"] = o.Registration
	}
	return json.Marshal(toSerialize)
}

type NullableEnvoyStatus struct {
	value *EnvoyStatus
	isSet bool
}

func (v NullableEnvoyStatus) Get() *EnvoyStatus {
	return v.value
}

func (v *NullableEnvoyStatus) Set(val *EnvoyStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvoyStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvoyStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvoyStatus(val *EnvoyStatus) *NullableEnvoyStatus {
	return &NullableEnvoyStatus{value: val, isSet: true}
}

func (v NullableEnvoyStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvoyStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


