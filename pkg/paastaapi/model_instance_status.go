/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paastaapi

import (
	"encoding/json"
)

// InstanceStatus struct for InstanceStatus
type InstanceStatus struct {
	// List of runs associated with job
	Adhoc *[]AdhocLaunchHistory `json:"adhoc,omitempty"`
	Flink *InstanceStatusFlink `json:"flink,omitempty"`
	// Git sha of a service
	GitSha *string `json:"git_sha,omitempty"`
	// Instance name
	Instance *string `json:"instance,omitempty"`
	Kafkacluster *InstanceStatusKafkacluster `json:"kafkacluster,omitempty"`
	Kubernetes *InstanceStatusKubernetes `json:"kubernetes,omitempty"`
	Marathon *InstanceStatusMarathon `json:"marathon,omitempty"`
	// Service name
	Service *string `json:"service,omitempty"`
	Tron *InstanceStatusTron `json:"tron,omitempty"`
}

// NewInstanceStatus instantiates a new InstanceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceStatus() *InstanceStatus {
	this := InstanceStatus{}
	return &this
}

// NewInstanceStatusWithDefaults instantiates a new InstanceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceStatusWithDefaults() *InstanceStatus {
	this := InstanceStatus{}
	return &this
}

// GetAdhoc returns the Adhoc field value if set, zero value otherwise.
func (o *InstanceStatus) GetAdhoc() []AdhocLaunchHistory {
	if o == nil || o.Adhoc == nil {
		var ret []AdhocLaunchHistory
		return ret
	}
	return *o.Adhoc
}

// GetAdhocOk returns a tuple with the Adhoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetAdhocOk() (*[]AdhocLaunchHistory, bool) {
	if o == nil || o.Adhoc == nil {
		return nil, false
	}
	return o.Adhoc, true
}

// HasAdhoc returns a boolean if a field has been set.
func (o *InstanceStatus) HasAdhoc() bool {
	if o != nil && o.Adhoc != nil {
		return true
	}

	return false
}

// SetAdhoc gets a reference to the given []AdhocLaunchHistory and assigns it to the Adhoc field.
func (o *InstanceStatus) SetAdhoc(v []AdhocLaunchHistory) {
	o.Adhoc = &v
}

// GetFlink returns the Flink field value if set, zero value otherwise.
func (o *InstanceStatus) GetFlink() InstanceStatusFlink {
	if o == nil || o.Flink == nil {
		var ret InstanceStatusFlink
		return ret
	}
	return *o.Flink
}

// GetFlinkOk returns a tuple with the Flink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetFlinkOk() (*InstanceStatusFlink, bool) {
	if o == nil || o.Flink == nil {
		return nil, false
	}
	return o.Flink, true
}

// HasFlink returns a boolean if a field has been set.
func (o *InstanceStatus) HasFlink() bool {
	if o != nil && o.Flink != nil {
		return true
	}

	return false
}

// SetFlink gets a reference to the given InstanceStatusFlink and assigns it to the Flink field.
func (o *InstanceStatus) SetFlink(v InstanceStatusFlink) {
	o.Flink = &v
}

// GetGitSha returns the GitSha field value if set, zero value otherwise.
func (o *InstanceStatus) GetGitSha() string {
	if o == nil || o.GitSha == nil {
		var ret string
		return ret
	}
	return *o.GitSha
}

// GetGitShaOk returns a tuple with the GitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetGitShaOk() (*string, bool) {
	if o == nil || o.GitSha == nil {
		return nil, false
	}
	return o.GitSha, true
}

// HasGitSha returns a boolean if a field has been set.
func (o *InstanceStatus) HasGitSha() bool {
	if o != nil && o.GitSha != nil {
		return true
	}

	return false
}

// SetGitSha gets a reference to the given string and assigns it to the GitSha field.
func (o *InstanceStatus) SetGitSha(v string) {
	o.GitSha = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *InstanceStatus) GetInstance() string {
	if o == nil || o.Instance == nil {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetInstanceOk() (*string, bool) {
	if o == nil || o.Instance == nil {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *InstanceStatus) HasInstance() bool {
	if o != nil && o.Instance != nil {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *InstanceStatus) SetInstance(v string) {
	o.Instance = &v
}

// GetKafkacluster returns the Kafkacluster field value if set, zero value otherwise.
func (o *InstanceStatus) GetKafkacluster() InstanceStatusKafkacluster {
	if o == nil || o.Kafkacluster == nil {
		var ret InstanceStatusKafkacluster
		return ret
	}
	return *o.Kafkacluster
}

// GetKafkaclusterOk returns a tuple with the Kafkacluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetKafkaclusterOk() (*InstanceStatusKafkacluster, bool) {
	if o == nil || o.Kafkacluster == nil {
		return nil, false
	}
	return o.Kafkacluster, true
}

// HasKafkacluster returns a boolean if a field has been set.
func (o *InstanceStatus) HasKafkacluster() bool {
	if o != nil && o.Kafkacluster != nil {
		return true
	}

	return false
}

// SetKafkacluster gets a reference to the given InstanceStatusKafkacluster and assigns it to the Kafkacluster field.
func (o *InstanceStatus) SetKafkacluster(v InstanceStatusKafkacluster) {
	o.Kafkacluster = &v
}

// GetKubernetes returns the Kubernetes field value if set, zero value otherwise.
func (o *InstanceStatus) GetKubernetes() InstanceStatusKubernetes {
	if o == nil || o.Kubernetes == nil {
		var ret InstanceStatusKubernetes
		return ret
	}
	return *o.Kubernetes
}

// GetKubernetesOk returns a tuple with the Kubernetes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetKubernetesOk() (*InstanceStatusKubernetes, bool) {
	if o == nil || o.Kubernetes == nil {
		return nil, false
	}
	return o.Kubernetes, true
}

// HasKubernetes returns a boolean if a field has been set.
func (o *InstanceStatus) HasKubernetes() bool {
	if o != nil && o.Kubernetes != nil {
		return true
	}

	return false
}

// SetKubernetes gets a reference to the given InstanceStatusKubernetes and assigns it to the Kubernetes field.
func (o *InstanceStatus) SetKubernetes(v InstanceStatusKubernetes) {
	o.Kubernetes = &v
}

// GetMarathon returns the Marathon field value if set, zero value otherwise.
func (o *InstanceStatus) GetMarathon() InstanceStatusMarathon {
	if o == nil || o.Marathon == nil {
		var ret InstanceStatusMarathon
		return ret
	}
	return *o.Marathon
}

// GetMarathonOk returns a tuple with the Marathon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetMarathonOk() (*InstanceStatusMarathon, bool) {
	if o == nil || o.Marathon == nil {
		return nil, false
	}
	return o.Marathon, true
}

// HasMarathon returns a boolean if a field has been set.
func (o *InstanceStatus) HasMarathon() bool {
	if o != nil && o.Marathon != nil {
		return true
	}

	return false
}

// SetMarathon gets a reference to the given InstanceStatusMarathon and assigns it to the Marathon field.
func (o *InstanceStatus) SetMarathon(v InstanceStatusMarathon) {
	o.Marathon = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *InstanceStatus) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *InstanceStatus) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *InstanceStatus) SetService(v string) {
	o.Service = &v
}

// GetTron returns the Tron field value if set, zero value otherwise.
func (o *InstanceStatus) GetTron() InstanceStatusTron {
	if o == nil || o.Tron == nil {
		var ret InstanceStatusTron
		return ret
	}
	return *o.Tron
}

// GetTronOk returns a tuple with the Tron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceStatus) GetTronOk() (*InstanceStatusTron, bool) {
	if o == nil || o.Tron == nil {
		return nil, false
	}
	return o.Tron, true
}

// HasTron returns a boolean if a field has been set.
func (o *InstanceStatus) HasTron() bool {
	if o != nil && o.Tron != nil {
		return true
	}

	return false
}

// SetTron gets a reference to the given InstanceStatusTron and assigns it to the Tron field.
func (o *InstanceStatus) SetTron(v InstanceStatusTron) {
	o.Tron = &v
}

func (o InstanceStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Adhoc != nil {
		toSerialize["adhoc"] = o.Adhoc
	}
	if o.Flink != nil {
		toSerialize["flink"] = o.Flink
	}
	if o.GitSha != nil {
		toSerialize["git_sha"] = o.GitSha
	}
	if o.Instance != nil {
		toSerialize["instance"] = o.Instance
	}
	if o.Kafkacluster != nil {
		toSerialize["kafkacluster"] = o.Kafkacluster
	}
	if o.Kubernetes != nil {
		toSerialize["kubernetes"] = o.Kubernetes
	}
	if o.Marathon != nil {
		toSerialize["marathon"] = o.Marathon
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Tron != nil {
		toSerialize["tron"] = o.Tron
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceStatus struct {
	value *InstanceStatus
	isSet bool
}

func (v NullableInstanceStatus) Get() *InstanceStatus {
	return v.value
}

func (v *NullableInstanceStatus) Set(val *InstanceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceStatus(val *InstanceStatus) *NullableInstanceStatus {
	return &NullableInstanceStatus{value: val, isSet: true}
}

func (v NullableInstanceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


