/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paastaapi

import (
	"encoding/json"
)

// FloatAndError struct for FloatAndError
type FloatAndError struct {
	ErrorMessage *string `json:"error_message,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewFloatAndError instantiates a new FloatAndError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFloatAndError() *FloatAndError {
	this := FloatAndError{}
	return &this
}

// NewFloatAndErrorWithDefaults instantiates a new FloatAndError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFloatAndErrorWithDefaults() *FloatAndError {
	this := FloatAndError{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *FloatAndError) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatAndError) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *FloatAndError) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *FloatAndError) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FloatAndError) GetValue() float32 {
	if o == nil || o.Value == nil {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatAndError) GetValueOk() (*float32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FloatAndError) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *FloatAndError) SetValue(v float32) {
	o.Value = &v
}

func (o FloatAndError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorMessage != nil {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableFloatAndError struct {
	value *FloatAndError
	isSet bool
}

func (v NullableFloatAndError) Get() *FloatAndError {
	return v.value
}

func (v *NullableFloatAndError) Set(val *FloatAndError) {
	v.value = val
	v.isSet = true
}

func (v NullableFloatAndError) IsSet() bool {
	return v.isSet
}

func (v *NullableFloatAndError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFloatAndError(val *FloatAndError) *NullableFloatAndError {
	return &NullableFloatAndError{value: val, isSet: true}
}

func (v NullableFloatAndError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFloatAndError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


