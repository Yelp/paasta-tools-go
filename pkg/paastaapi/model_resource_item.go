/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paastaapi

import (
	"encoding/json"
)

// ResourceItem struct for ResourceItem
type ResourceItem struct {
	Cpus *ResourceValue `json:"cpus,omitempty"`
	Disk *ResourceValue `json:"disk,omitempty"`
	Groupings *map[string]interface{} `json:"groupings,omitempty"`
	Mem *ResourceValue `json:"mem,omitempty"`
	Gpus *ResourceValue `json:"gpus,omitempty"`
}

// NewResourceItem instantiates a new ResourceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceItem() *ResourceItem {
	this := ResourceItem{}
	return &this
}

// NewResourceItemWithDefaults instantiates a new ResourceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceItemWithDefaults() *ResourceItem {
	this := ResourceItem{}
	return &this
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *ResourceItem) GetCpus() ResourceValue {
	if o == nil || o.Cpus == nil {
		var ret ResourceValue
		return ret
	}
	return *o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceItem) GetCpusOk() (*ResourceValue, bool) {
	if o == nil || o.Cpus == nil {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *ResourceItem) HasCpus() bool {
	if o != nil && o.Cpus != nil {
		return true
	}

	return false
}

// SetCpus gets a reference to the given ResourceValue and assigns it to the Cpus field.
func (o *ResourceItem) SetCpus(v ResourceValue) {
	o.Cpus = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *ResourceItem) GetDisk() ResourceValue {
	if o == nil || o.Disk == nil {
		var ret ResourceValue
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceItem) GetDiskOk() (*ResourceValue, bool) {
	if o == nil || o.Disk == nil {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *ResourceItem) HasDisk() bool {
	if o != nil && o.Disk != nil {
		return true
	}

	return false
}

// SetDisk gets a reference to the given ResourceValue and assigns it to the Disk field.
func (o *ResourceItem) SetDisk(v ResourceValue) {
	o.Disk = &v
}

// GetGroupings returns the Groupings field value if set, zero value otherwise.
func (o *ResourceItem) GetGroupings() map[string]interface{} {
	if o == nil || o.Groupings == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Groupings
}

// GetGroupingsOk returns a tuple with the Groupings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceItem) GetGroupingsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Groupings == nil {
		return nil, false
	}
	return o.Groupings, true
}

// HasGroupings returns a boolean if a field has been set.
func (o *ResourceItem) HasGroupings() bool {
	if o != nil && o.Groupings != nil {
		return true
	}

	return false
}

// SetGroupings gets a reference to the given map[string]interface{} and assigns it to the Groupings field.
func (o *ResourceItem) SetGroupings(v map[string]interface{}) {
	o.Groupings = &v
}

// GetMem returns the Mem field value if set, zero value otherwise.
func (o *ResourceItem) GetMem() ResourceValue {
	if o == nil || o.Mem == nil {
		var ret ResourceValue
		return ret
	}
	return *o.Mem
}

// GetMemOk returns a tuple with the Mem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceItem) GetMemOk() (*ResourceValue, bool) {
	if o == nil || o.Mem == nil {
		return nil, false
	}
	return o.Mem, true
}

// HasMem returns a boolean if a field has been set.
func (o *ResourceItem) HasMem() bool {
	if o != nil && o.Mem != nil {
		return true
	}

	return false
}

// SetMem gets a reference to the given ResourceValue and assigns it to the Mem field.
func (o *ResourceItem) SetMem(v ResourceValue) {
	o.Mem = &v
}

// GetGpus returns the Gpus field value if set, zero value otherwise.
func (o *ResourceItem) GetGpus() ResourceValue {
	if o == nil || o.Gpus == nil {
		var ret ResourceValue
		return ret
	}
	return *o.Gpus
}

// GetGpusOk returns a tuple with the Gpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceItem) GetGpusOk() (*ResourceValue, bool) {
	if o == nil || o.Gpus == nil {
		return nil, false
	}
	return o.Gpus, true
}

// HasGpus returns a boolean if a field has been set.
func (o *ResourceItem) HasGpus() bool {
	if o != nil && o.Gpus != nil {
		return true
	}

	return false
}

// SetGpus gets a reference to the given ResourceValue and assigns it to the Gpus field.
func (o *ResourceItem) SetGpus(v ResourceValue) {
	o.Gpus = &v
}

func (o ResourceItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cpus != nil {
		toSerialize["cpus"] = o.Cpus
	}
	if o.Disk != nil {
		toSerialize["disk"] = o.Disk
	}
	if o.Groupings != nil {
		toSerialize["groupings"] = o.Groupings
	}
	if o.Mem != nil {
		toSerialize["mem"] = o.Mem
	}
	if o.Gpus != nil {
		toSerialize["gpus"] = o.Gpus
	}
	return json.Marshal(toSerialize)
}

type NullableResourceItem struct {
	value *ResourceItem
	isSet bool
}

func (v NullableResourceItem) Get() *ResourceItem {
	return v.value
}

func (v *NullableResourceItem) Set(val *ResourceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceItem(val *ResourceItem) *NullableResourceItem {
	return &NullableResourceItem{value: val, isSet: true}
}

func (v NullableResourceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


