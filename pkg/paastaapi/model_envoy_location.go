/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paastaapi

import (
	"encoding/json"
)

// EnvoyLocation struct for EnvoyLocation
type EnvoyLocation struct {
	// Envoy backends running in this location
	Backends *[]EnvoyBackend `json:"backends,omitempty"`
	// Whether this backend is proxied through Casper
	IsProxiedThroughCasper *bool `json:"is_proxied_through_casper,omitempty"`
	// Name of the location
	Name *string `json:"name,omitempty"`
	// Number of running backends for the service in this location
	RunningBackendsCount *int32 `json:"running_backends_count,omitempty"`
}

// NewEnvoyLocation instantiates a new EnvoyLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvoyLocation() *EnvoyLocation {
	this := EnvoyLocation{}
	return &this
}

// NewEnvoyLocationWithDefaults instantiates a new EnvoyLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvoyLocationWithDefaults() *EnvoyLocation {
	this := EnvoyLocation{}
	return &this
}

// GetBackends returns the Backends field value if set, zero value otherwise.
func (o *EnvoyLocation) GetBackends() []EnvoyBackend {
	if o == nil || o.Backends == nil {
		var ret []EnvoyBackend
		return ret
	}
	return *o.Backends
}

// GetBackendsOk returns a tuple with the Backends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvoyLocation) GetBackendsOk() (*[]EnvoyBackend, bool) {
	if o == nil || o.Backends == nil {
		return nil, false
	}
	return o.Backends, true
}

// HasBackends returns a boolean if a field has been set.
func (o *EnvoyLocation) HasBackends() bool {
	if o != nil && o.Backends != nil {
		return true
	}

	return false
}

// SetBackends gets a reference to the given []EnvoyBackend and assigns it to the Backends field.
func (o *EnvoyLocation) SetBackends(v []EnvoyBackend) {
	o.Backends = &v
}

// GetIsProxiedThroughCasper returns the IsProxiedThroughCasper field value if set, zero value otherwise.
func (o *EnvoyLocation) GetIsProxiedThroughCasper() bool {
	if o == nil || o.IsProxiedThroughCasper == nil {
		var ret bool
		return ret
	}
	return *o.IsProxiedThroughCasper
}

// GetIsProxiedThroughCasperOk returns a tuple with the IsProxiedThroughCasper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvoyLocation) GetIsProxiedThroughCasperOk() (*bool, bool) {
	if o == nil || o.IsProxiedThroughCasper == nil {
		return nil, false
	}
	return o.IsProxiedThroughCasper, true
}

// HasIsProxiedThroughCasper returns a boolean if a field has been set.
func (o *EnvoyLocation) HasIsProxiedThroughCasper() bool {
	if o != nil && o.IsProxiedThroughCasper != nil {
		return true
	}

	return false
}

// SetIsProxiedThroughCasper gets a reference to the given bool and assigns it to the IsProxiedThroughCasper field.
func (o *EnvoyLocation) SetIsProxiedThroughCasper(v bool) {
	o.IsProxiedThroughCasper = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvoyLocation) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvoyLocation) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvoyLocation) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvoyLocation) SetName(v string) {
	o.Name = &v
}

// GetRunningBackendsCount returns the RunningBackendsCount field value if set, zero value otherwise.
func (o *EnvoyLocation) GetRunningBackendsCount() int32 {
	if o == nil || o.RunningBackendsCount == nil {
		var ret int32
		return ret
	}
	return *o.RunningBackendsCount
}

// GetRunningBackendsCountOk returns a tuple with the RunningBackendsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvoyLocation) GetRunningBackendsCountOk() (*int32, bool) {
	if o == nil || o.RunningBackendsCount == nil {
		return nil, false
	}
	return o.RunningBackendsCount, true
}

// HasRunningBackendsCount returns a boolean if a field has been set.
func (o *EnvoyLocation) HasRunningBackendsCount() bool {
	if o != nil && o.RunningBackendsCount != nil {
		return true
	}

	return false
}

// SetRunningBackendsCount gets a reference to the given int32 and assigns it to the RunningBackendsCount field.
func (o *EnvoyLocation) SetRunningBackendsCount(v int32) {
	o.RunningBackendsCount = &v
}

func (o EnvoyLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Backends != nil {
		toSerialize["backends"] = o.Backends
	}
	if o.IsProxiedThroughCasper != nil {
		toSerialize["is_proxied_through_casper"] = o.IsProxiedThroughCasper
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RunningBackendsCount != nil {
		toSerialize["running_backends_count"] = o.RunningBackendsCount
	}
	return json.Marshal(toSerialize)
}

type NullableEnvoyLocation struct {
	value *EnvoyLocation
	isSet bool
}

func (v NullableEnvoyLocation) Get() *EnvoyLocation {
	return v.value
}

func (v *NullableEnvoyLocation) Set(val *EnvoyLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvoyLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvoyLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvoyLocation(val *EnvoyLocation) *NullableEnvoyLocation {
	return &NullableEnvoyLocation{value: val, isSet: true}
}

func (v NullableEnvoyLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvoyLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


