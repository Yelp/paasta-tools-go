/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paastaapi

import (
	"encoding/json"
)

// ResourceValue struct for ResourceValue
type ResourceValue struct {
	Free *float32 `json:"free,omitempty"`
	Total *float32 `json:"total,omitempty"`
	Used *float32 `json:"used,omitempty"`
}

// NewResourceValue instantiates a new ResourceValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceValue() *ResourceValue {
	this := ResourceValue{}
	return &this
}

// NewResourceValueWithDefaults instantiates a new ResourceValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceValueWithDefaults() *ResourceValue {
	this := ResourceValue{}
	return &this
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *ResourceValue) GetFree() float32 {
	if o == nil || o.Free == nil {
		var ret float32
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceValue) GetFreeOk() (*float32, bool) {
	if o == nil || o.Free == nil {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *ResourceValue) HasFree() bool {
	if o != nil && o.Free != nil {
		return true
	}

	return false
}

// SetFree gets a reference to the given float32 and assigns it to the Free field.
func (o *ResourceValue) SetFree(v float32) {
	o.Free = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ResourceValue) GetTotal() float32 {
	if o == nil || o.Total == nil {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceValue) GetTotalOk() (*float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ResourceValue) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *ResourceValue) SetTotal(v float32) {
	o.Total = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *ResourceValue) GetUsed() float32 {
	if o == nil || o.Used == nil {
		var ret float32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceValue) GetUsedOk() (*float32, bool) {
	if o == nil || o.Used == nil {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *ResourceValue) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given float32 and assigns it to the Used field.
func (o *ResourceValue) SetUsed(v float32) {
	o.Used = &v
}

func (o ResourceValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Free != nil {
		toSerialize["free"] = o.Free
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	return json.Marshal(toSerialize)
}

type NullableResourceValue struct {
	value *ResourceValue
	isSet bool
}

func (v NullableResourceValue) Get() *ResourceValue {
	return v.value
}

func (v *NullableResourceValue) Set(val *ResourceValue) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceValue) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceValue(val *ResourceValue) *NullableResourceValue {
	return &NullableResourceValue{value: val, isSet: true}
}

func (v NullableResourceValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


