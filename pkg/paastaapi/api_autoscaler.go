/*
 * Paasta API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paastaapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AutoscalerApiService AutoscalerApi service
type AutoscalerApiService service

type ApiGetAutoscalerCountRequest struct {
	ctx _context.Context
	ApiService *AutoscalerApiService
	service string
	instance string
}


func (r ApiGetAutoscalerCountRequest) Execute() (AutoscalerCountMsg, *_nethttp.Response, error) {
	return r.ApiService.GetAutoscalerCountExecute(r)
}

/*
 * GetAutoscalerCount Get status of service_name.instance_name
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param service Service name
 * @param instance Instance name
 * @return ApiGetAutoscalerCountRequest
 */
func (a *AutoscalerApiService) GetAutoscalerCount(ctx _context.Context, service string, instance string) ApiGetAutoscalerCountRequest {
	return ApiGetAutoscalerCountRequest{
		ApiService: a,
		ctx: ctx,
		service: service,
		instance: instance,
	}
}

/*
 * Execute executes the request
 * @return AutoscalerCountMsg
 */
func (a *AutoscalerApiService) GetAutoscalerCountExecute(r ApiGetAutoscalerCountRequest) (AutoscalerCountMsg, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AutoscalerCountMsg
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoscalerApiService.GetAutoscalerCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/{service}/{instance}/autoscaler"
	localVarPath = strings.Replace(localVarPath, "{"+"service"+"}", _neturl.PathEscape(parameterToString(r.service, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instance"+"}", _neturl.PathEscape(parameterToString(r.instance, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAutoscalerCountRequest struct {
	ctx _context.Context
	ApiService *AutoscalerApiService
	service string
	instance string
	autoscalerCountMsg *AutoscalerCountMsg
}

func (r ApiUpdateAutoscalerCountRequest) AutoscalerCountMsg(autoscalerCountMsg AutoscalerCountMsg) ApiUpdateAutoscalerCountRequest {
	r.autoscalerCountMsg = &autoscalerCountMsg
	return r
}

func (r ApiUpdateAutoscalerCountRequest) Execute() (AutoscalerCountMsg, *_nethttp.Response, error) {
	return r.ApiService.UpdateAutoscalerCountExecute(r)
}

/*
 * UpdateAutoscalerCount Get status of service_name.instance_name
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param service Service name
 * @param instance Instance name
 * @return ApiUpdateAutoscalerCountRequest
 */
func (a *AutoscalerApiService) UpdateAutoscalerCount(ctx _context.Context, service string, instance string) ApiUpdateAutoscalerCountRequest {
	return ApiUpdateAutoscalerCountRequest{
		ApiService: a,
		ctx: ctx,
		service: service,
		instance: instance,
	}
}

/*
 * Execute executes the request
 * @return AutoscalerCountMsg
 */
func (a *AutoscalerApiService) UpdateAutoscalerCountExecute(r ApiUpdateAutoscalerCountRequest) (AutoscalerCountMsg, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AutoscalerCountMsg
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoscalerApiService.UpdateAutoscalerCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/{service}/{instance}/autoscaler"
	localVarPath = strings.Replace(localVarPath, "{"+"service"+"}", _neturl.PathEscape(parameterToString(r.service, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instance"+"}", _neturl.PathEscape(parameterToString(r.instance, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.autoscalerCountMsg == nil {
		return localVarReturnValue, nil, reportError("autoscalerCountMsg is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoscalerCountMsg
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
